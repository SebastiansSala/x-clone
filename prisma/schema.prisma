// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id               String     @id @default(uuid())
  user_name        String
  name             String
  avatar_url       String
  description      String?
  followers        Users[]    @relation("UserFollow")
  following        Users[]    @relation("UserFollow")
  blockedUsers     Users[]    @relation("UserBlockedBy")
  blockedBy        Users[]    @relation("UserBlockedBy")
  likedPosts       Posts[]    @relation("PostLikeBy")
  posts            Posts[]
  retweets         Retweets[] @relation("PostRetweetedBy")
  likedComments    Comments[] @relation("CommentsLikedBy")
  bookmarks        Posts[]    @relation("PostBookmarkedBy")
  comments         Comments[]
  recievedMessages Messages[] @relation("RecievedMessage")
  sentMessages     Messages[] @relation("SentMessage")

  @@map("users")
}

model Messages {
  id          String   @id @default(uuid())
  text        String
  images      Images[]
  sender      Users    @relation("SentMessage", fields: [senderId], references: [id])
  senderId    String
  recipient   Users    @relation("RecievedMessage", fields: [recipientId], references: [id])
  recipientId String
  createdAt   DateTime @default(now())

  @@map("messages")
}

model Posts {
  id            String     @id @default(uuid())
  text          String
  author        Users      @relation(fields: [authorId], references: [id])
  authorId      String
  retweets      Retweets[] @relation("RetweetedPost")
  createdAt     DateTime   @default(now())
  images        Images[]
  updatedAt     DateTime?
  likes         Users[]    @relation("PostLikeBy")
  comments      Comments[] @relation("PostComment")
  bookmarks     Users[]    @relation("PostBookmarkedBy")
  publicVisible Boolean    @default(true)

  @@map("posts")
}

model Images {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  url       String
  post      Posts?    @relation(fields: [postId], references: [id])
  postId    String?
  message   Messages? @relation(fields: [messageId], references: [id])
  messageId String?
  comment   Comments? @relation(fields: [commentId], references: [id])
  commentId String?   @unique

  @@map("images")
}

model Comments {
  id        String  @id @default(uuid())
  createdAt String
  updatedAt String
  text      String
  likes     Users[] @relation("CommentsLikedBy")
  post      Posts   @relation("PostComment", fields: [postId], references: [id])
  postId    String
  author    Users   @relation(fields: [authorId], references: [id])
  authorId  String
  image     Images?

  @@map("comments")
}

model Retweets {
  id         String @id @default(uuid())
  created_at String
  text       String
  author     Users  @relation("PostRetweetedBy", fields: [authorId], references: [id])
  authorId   String
  post       Posts  @relation("RetweetedPost", fields: [postId], references: [id])
  postId     String

  @@map("retweets")
}
